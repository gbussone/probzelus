open Probzelus
open Distribution
open Zelus_io

let node mse (true_p, p) = mse where
  rec t = 1. fby (t +. 1.)
  and estimated_p = mean_float p
  and error = (estimated_p -. true_p) ** 2.
  and total_error = error -> (pre total_error) +. error
  and mse = total_error /. t

let node var_metric p = score where
  rec _, v = stats_float p
  and score = -. log v

let id x = x

open Infer_apf_mm
open Zelus_owl
open Lib

let node read () =
  let theta_0 = Scanf.scanf "%f, " id in
  let theta_1 = Scanf.scanf "%f, " id in
  let x_0 = Scanf.scanf "%f, " id in
  let x_1 = Scanf.scanf "%f, " id in
  let delta = Scanf.scanf "%f, " id in
  let alpha = Scanf.scanf "%f\n" id in
  (theta_0, theta_1), vec [x_0; x_1], (delta, alpha)

let fst x = vec_get x 0
let snd x = vec_get x 1

let node error_theta (true_theta, theta) =
  let true_theta_0, true_theta_1 = true_theta in
  let theta_0, theta_1 = split theta in
  mse (true_theta_0, theta_0) +. mse (true_theta_1, theta_1)
let metric_theta = ess
let node error_x (true_x, x) =
  let true_x_0, true_x_1 = vec_get true_x 0, vec_get true_x 1 in
  let x_0, x_1 = map fst x, map snd x in
  mse (true_x_0, x_0) +. mse (true_x_1, x_1)
let metric_x = ess

let alpha_noise = 0.001
let delta_noise = 5.0

let speed = 0.1
let ping_speed = 1000.
let x0 = vec [10.; 10.]

let i2 = diagm [1.0; 1.0]

let proba move x0 = (theta_0, theta_1), x where
  rec init theta_0 = sample (gaussian (0., 1.))
  and init theta_1 = sample (gaussian (0., 1.))
  and theta = vec [theta_0; theta_1]
  and x = x0 -> sample (mv_gaussian (pre x +@ theta, speed *@ i2))

let proba model (delta, alpha) = theta, x where
  rec theta, x = move x0
  and d = sqrt ((vec_get x 0) ** 2. +. (vec_get x 1) ** 2.)
  and () = observe (gaussian ((d *. 2.) /. ping_speed, delta_noise), delta)
  and a = atan (vec_get x 1 /. vec_get x 0)
  and () = observe (gaussian (a, alpha_noise), alpha)

let node main () = () where
  rec i = 1 fby (i + 1)
  and init start = Time.start ()
  and true_theta, true_x, obs = read ()
  and d, time =
    let d = infer { apf_particles=100; apf_mm_particles=100 } model obs in
    let time = Time.time start in
    d, time
  and theta, x = split d
  and () =
    Format.printf "%d, %f, %f, %f, %f, %f@." i
      (error_theta (true_theta, theta)) (metric_theta theta)
      (error_x (true_x, x)) (metric_x x)
      time
