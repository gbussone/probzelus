type prob

val sample : 'a Distribution.t ~D~> 'a
val sample' : prob * 'a Distribution.t -AD-> 'a
val factor : float ~D~> unit
val factor' : prob * float -AD-> unit
val observe : 'a Distribution.t * 'a ~D~> unit
val observe' : prob * ('a Distribution.t * 'a) -AD-> unit

type apf_params = {
  apf_particles: int;
  apf_iter: int;
  apf_eta: float;
  apf_batch: int;
}

val infer :
  apf_params -S-> (('a * 'd) * 'b ~D~> 'c) -S-> (('a * 'd) Distribution.t * 'b) -D->
  ('a * 'c) Distribution.t
